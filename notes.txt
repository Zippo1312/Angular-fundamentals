
----------------------------------
TypeScript Features
----------------------------------
Static Typing (adding data types)
  let name : string

Interfaces (shape of object)
  interface ICat{
    name:string
    age:number
  }

  let fluffy:ICat

    if set age?:number -> this will make property optional

ClassProperties
  class Cat{
    name:string
    constructor(name){
      this.name = name
    }
  }

Public and Private accessibility
  class Cat{
    constructor(private name, private age){

    }
  }
----------------------------------
Initing new Angular project:
  ng new project-name

To add static files, declare them in angular.json (styles/scripts)
----------------------------------
Using inputs (pass data from parent to child component)
  Create "@Input() event:any" in exported component Class
  and declare this event in html that passes this event to component
  <events-thumbnail [event]="event1"></events-thumbnail>
----------------------------------
Using outputs (pass data from child to parent component)
  In child:
    declare event in html: (click)="handleClickMe()"
    @Output() eventClick = new EventEmitter()
    and func to handle this event
    handleClickMe(){ this.eventClick.emit('foo'); }
  In parent:
    register event in html component (eventClick)="handleEventClicked($event)"
    and declare handler for it: handleEventClicked(data){ ..staff }
----------------------------------
Template variables
Another way to handle components comunication like @Input() and @Output()
Just declare variable with #varName in component html:
  <component-tag #componentShortName></component-tag>
And then access to component by this var:
  {{componentShortName.someProp}} or {{componentShortName.someMethod()}}
----------------------------------
Styling Components
use styles: [` for inline styling `]
or
styleUrls: ['./path-to-style.css']

----------------------------------
INTERPOLATION, EXPRESSIONS, EVENTS, STATEMENTS
----------------------------------
{{user.name}} - Interpolation
[src]="user.imageSrc" - Property Binding
(click)="doSomething()" - Event Binding
----------------------------------
ngFor
<component-name *ngFor="let event of events"></component-name>
----------------------------------
Save navigation
{{event?.name}} - if event is null or undefined - no errors will occur
{{event?.location?.address}}
----------------------------------
ngIf
*ngIf="event?.location" - if expression is true ...
[hidden]="!event?.location" - hide DOM element if true
----------------------------------
ngSwitchCase
<div [ngSwitch]="event?.time">
  <div *ngSwitchCase="'8:00 am'">Early Start</div>
  <div *ngSwitchDefault>Normal Start</div>
</div>

----------------------------------
ngClass / ngStyle (works the same as ngClass)
[class.green]="event?.time === '8:00 am'" - adds class if condition true
[ngClass]="{
  green: event?.time === '8:00 am',
  bold: event?.time === '10:00 am'}" - will add class(es) if condition return true
----------------------------------

----------------------------------
SERVICES
----------------------------------
@Injectable() - required when service injects another service
like when service injected in constructor
----------------------------------
Services must be registred as a providers in app.module
----------------------------------
Make services calls from ngOnInit() method, not in constructor
----------------------------------
Declare variable for third party libraries like toastr
for TypeScript to know that var is in scope already
  declare let toastr
It is good to create services for that kind of things
----------------------------------

----------------------------------
ROUTING
----------------------------------

----------------------------------
----------------------------------
----------------------------------



