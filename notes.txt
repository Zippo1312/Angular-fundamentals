
----------------------------------
TypeScript Features
----------------------------------
Static Typing (adding data types)
  let name : string

Interfaces (shape of object)
  interface ICat{
    name:string
    age:number
  }

  let fluffy:ICat

    if set age?:number -> this will make property optional

ClassProperties
  class Cat{
    name:string
    constructor(name){
      this.name = name
    }
  }

Public and Private accessibility
  class Cat{
    constructor(private name, private age){

    }
  }
----------------------------------
Initing new Angular project:
  ng new project-name

To add static files, declare them in angular.json (styles/scripts)
----------------------------------
Using inputs (pass data from parent to child component)
  Create "@Input() event:any" in exported component Class
  and declare this event in html that passes this event to component
  <events-thumbnail [event]="event1"></events-thumbnail>
----------------------------------
Using outputs (pass data from child to parent component)
  In child:
    declare event in html: (click)="handleClickMe()"
    @Output() eventClick = new EventEmitter()
    and func to handle this event
    handleClickMe(){ this.eventClick.emit('foo'); }
  In parent:
    register event in html component (eventClick)="handleEventClicked($event)"
    and declare handler for it: handleEventClicked(data){ ..staff }
----------------------------------
Template variables
Another way to handle components comunication like @Input() and @Output()
Just declare variable with #varName in component html:
  <component-tag #componentShortName></component-tag>
And then access to component by this var:
  {{componentShortName.someProp}} or {{componentShortName.someMethod()}}
----------------------------------
Styling Components
use styles: [` for inline styling `]
or
styleUrls: ['./path-to-style.css']

----------------------------------
Interpolation, Expressions, Events, Statements
----------------------------------
{{user.name}} - Interpolation
[src]="user.imageSrc" - Property Binding
(click)="doSomething()" - Event Binding
----------------------------------
ngFor
<component-name *ngFor="let event of events"></component-name>
----------------------------------
Save navigation
{{event?.name}} - if event is null or undefined - no errors will occur
{{event?.location?.address}}
----------------------------------
ngIf
*ngIf="event?.location" - if expression is true ...
----------------------------------

----------------------------------
----------------------------------



